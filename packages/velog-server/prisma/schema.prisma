generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id        String   @id(map: "PK_06744d221bb6145dc61e5dc441d") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkUserId  String   @map("fk_user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  user      User     @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_548ae43e47192962c941abbc4d1")

  @@index([fkUserId], map: "IDX_548ae43e47192962c941abbc4d")
  @@map("admin_users")
}

model AuthToken {
  id        String   @id(map: "PK_41e9ddfbb32da18c4e85e45c2fd") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkUserId  String   @map("fk_user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  disabled  Boolean  @default(false)
  user      User     @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_71e1bb3fd8c767a404b1a6a211e")

  @@map("auth_tokens")
}

model Category {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String?        @db.VarChar(255)
  urlSlug      String?        @map("url_slug") @db.VarChar(255)
  order        Int?
  parent       String?        @db.VarChar(255)
  fkUserId     String?        @map("fk_user_id") @db.Uuid
  private      Boolean?       @default(false)
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime       @default(now()) @map("updated_at") @db.Timestamptz(6)
  user         User?          @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  postCategory PostCategory[]

  @@index([urlSlug], map: "categories_url_slug")
  @@index([fkUserId, parent, order], map: "category_order_of_user")
  @@map("categories")
}

model Comment {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkPostId   String?  @map("fk_post_id") @db.Uuid
  fkUserId   String?  @map("fk_user_id") @db.Uuid
  text       String?
  likes      Int?     @default(0)
  metaJson   String?  @map("meta_json")
  replyTo    String?  @map("reply_to") @db.Uuid
  level      Int?     @default(0)
  hasReplies Boolean? @default(false) @map("has_replies")
  deleted    Boolean? @default(false)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  post       Post?    @relation(fields: [fkPostId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user       User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([createdAt], map: "comments_created_at")
  @@index([deleted])
  @@index([fkPostId])
  @@index([fkUserId, deleted], map: "comments_fk_user_id_idx")
  @@map("comments")
}

model EmailAuth {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code      String?  @unique @db.VarChar(255)
  email     String?  @db.VarChar(255)
  logged    Boolean? @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("email_auth")
}

model EmailCert {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code      String?  @unique @db.VarChar(255)
  fkUserId  String?  @map("fk_user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  status    Boolean? @default(true)
  user      User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([fkUserId], map: "email_cert_fk_user_id")
  @@map("email_cert")
}

model Feed {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkPostId  String?  @map("fk_post_id") @db.Uuid
  fkUserId  String?  @map("fk_user_id") @db.Uuid
  reason    Json?
  score     Int?     @default(1)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  post      Post?    @relation(fields: [fkPostId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user      User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([createdAt], map: "feeds_created_at")
  @@map("feeds")
}

model FollowTag {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkUserId  String?  @map("fk_user_id") @db.Uuid
  fkTagId   String?  @map("fk_tag_id") @db.Uuid
  score     Int?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  tag       Tag?     @relation(fields: [fkTagId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user      User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@map("follow_tag")
}

model FollowUser {
  id                                   String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkUserId                             String?  @map("fk_user_id") @db.Uuid
  fkFollowUserId                       String?  @map("fk_follow_user_id") @db.Uuid
  score                                Int?
  createdAt                            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                            DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  usersFollowUserFkFollowUserIdTousers User?    @relation("follow_user_fk_follow_user_idTousers", fields: [fkFollowUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  usersFollowUserFkUserIdTousers       User?    @relation("follow_user_fk_user_idTousers", fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@map("follow_user")
}

model Migrations {
  id        Int    @id(map: "PK_8c82d7f526340ab734260ea46be") @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar

  @@map("migrations")
}

model PostHistory {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkPostId   String?  @map("fk_post_id") @db.Uuid
  title      String?  @db.VarChar(255)
  body       String?
  isRelease  Boolean  @default(false) @map("is_release")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  isMarkdown Boolean  @default(false) @map("is_markdown")
  post       Post?    @relation(fields: [fkPostId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([createdAt], map: "post_histories_created_at")
  @@index([fkPostId], map: "post_histories_fk_post_id")
  @@map("post_histories")
}

model PostImage {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkPostId  String?  @map("fk_post_id") @db.Uuid
  fkUserId  String?  @map("fk_user_id") @db.Uuid
  path      String?  @db.VarChar(255)
  filesize  Int?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  post      Post?    @relation(fields: [fkPostId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user      User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@map("post_images")
}

model PostLike {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkPostId  String?  @map("fk_post_id") @db.Uuid
  fkUserId  String?  @map("fk_user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  post      Post?    @relation(fields: [fkPostId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user      User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([fkPostId, fkUserId], map: "post_likes_fk_post_id_fk_user_id")
  @@index([createdAt], map: "post_likes_created_at")
  @@index([fkUserId], map: "post_likes_fk_user_id")
  @@map("post_likes")
}

model PostReadLog {
  id            String   @id(map: "PK_bc18dad4a9c6ab3bf5a8605f9e7") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkPostId      String   @map("fk_post_id") @db.Uuid
  fkUserId      String   @map("fk_user_id") @db.Uuid
  percentage    Float    @db.Real
  resumeTitleId String?  @map("resume_title_id") @db.VarChar(255)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  post          Post     @relation(fields: [fkPostId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_7b37d3334ab7d049a97f8b2ee0c")
  user          User     @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_d4fd1d180f05445287d377ba49c")

  @@index([fkPostId], map: "IDX_7b37d3334ab7d049a97f8b2ee0")
  @@index([updatedAt], map: "IDX_b5a284ac996f5c21be43611214")
  @@index([fkUserId], map: "IDX_d4fd1d180f05445287d377ba49")
  @@map("post_read_logs")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model PostRead {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ipHash    String?  @map("ip_hash") @db.VarChar(255)
  fkUserId  String?  @map("fk_user_id") @db.Uuid
  fkPostId  String?  @map("fk_post_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  post      Post?    @relation(fields: [fkPostId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user      User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([createdAt], map: "post_reads_created_at")
  @@index([fkPostId], map: "post_reads_fk_post_id")
  @@index([fkUserId], map: "post_reads_fk_user_id")
  @@index([ipHash, fkPostId], map: "post_reads_ip_hash_fk_post_id")
  @@map("post_reads")
}

model PostScore {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type      String?  @db.VarChar(255)
  fkUserId  String?  @map("fk_user_id") @db.Uuid
  fkPostId  String?  @map("fk_post_id") @db.Uuid
  score     Float?   @default(0)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  post      Post?    @relation(fields: [fkPostId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user      User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([createdAt], map: "post_scores_created_at")
  @@index([fkPostId], map: "post_scores_fk_post_id")
  @@index([fkUserId], map: "post_scores_fk_user_id")
  @@map("post_scores")
}

model PostTagLegacy {
  fkPostId String @map("fk_post_id") @db.Uuid
  fkTagId  String @map("fk_tag_id") @db.Uuid
  post     Post   @relation(fields: [fkPostId], references: [id], onDelete: Cascade, map: "FK_3d4d13db047f2b2ca7671b84034")
  tag      Tag    @relation(fields: [fkTagId], references: [id], onDelete: Cascade, map: "FK_4de7a827965a085c53d7983f480")

  @@id([fkPostId, fkTagId], map: "PK_0734929674029206aa2b8b4554a")
  @@index([fkPostId], map: "IDX_3d4d13db047f2b2ca7671b8403")
  @@index([fkTagId], map: "IDX_4de7a827965a085c53d7983f48")
  @@map("post_tags")
}

model Post {
  id               String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title            String?                  @db.VarChar(255)
  body             String?
  shortDescription String?                  @map("short_description") @db.VarChar(255)
  thumbnail        String?                  @db.VarChar(500)
  isMarkdown       Boolean?                 @map("is_markdown")
  isTemp           Boolean?                 @map("is_temp")
  fkUserId         String                   @map("fk_user_id") @db.Uuid
  originalPostId   String?                  @map("original_post_id") @db.Uuid
  urlSlug          String?                  @map("url_slug") @db.VarChar(255)
  likes            Int?                     @default(0)
  meta             Json?                    @default("{}")
  views            Int?                     @default(0)
  createdAt        DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime                 @default(now()) @map("updated_at") @db.Timestamptz(6)
  isPrivate        Boolean                  @default(false) @map("is_private")
  releasedAt       DateTime?                @default(now()) @map("released_at") @db.Timestamptz(6)
  tsv              Unsupported("tsvector")?
  comment          Comment[]
  feed             Feed[]
  postHistory      PostHistory[]
  postImage        PostImage[]
  postLike         PostLike[]
  postReadLog      PostReadLog[]
  postRead         PostRead[]
  postScore        PostScore[]
  postTagLegacy    PostTagLegacy[]
  user             User                     @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  postCategory     PostCategory[]
  postTags         PostTag[]
  seriesPost       SeriesPost[]
  urlSlugHistory   UrlSlugHistory[]

  @@index([createdAt], map: "posts_created_at")
  @@index([fkUserId], map: "posts_fk_user_id")
  @@index([isPrivate], map: "posts_is_private")
  @@index([isTemp], map: "posts_is_temp")
  @@index([releasedAt], map: "posts_released_at")
  @@index([releasedAt(sort: Desc), id(sort: Desc)], map: "posts_released_at_idx")
  @@index([tsv], map: "posts_tsv", type: Gin)
  @@index([urlSlug], map: "posts_url_slug")
  @@map("posts")
}

model PostCategory {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkPostId     String?   @map("fk_post_id") @db.Uuid
  fkCategoryId String?   @map("fk_category_id") @db.Uuid
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  category     Category? @relation(fields: [fkCategoryId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  post         Post?     @relation(fields: [fkPostId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([fkPostId, fkCategoryId])
  @@map("posts_categories")
}

model PostTag {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkPostId  String?  @map("fk_post_id") @db.Uuid
  fkTagId   String?  @map("fk_tag_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  post      Post?    @relation(fields: [fkPostId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tag       Tag?     @relation(fields: [fkTagId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([fkPostId, fkTagId])
  @@map("posts_tags")
}

model Series {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkUserId    String?      @map("fk_user_id") @db.Uuid
  name        String?      @db.VarChar(255)
  description String?
  thumbnail   String?      @db.VarChar(255)
  urlSlug     String?      @map("url_slug") @db.VarChar(255)
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime     @default(now()) @map("updated_at") @db.Timestamptz(6)
  user        User?        @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  seriesPost  SeriesPost[]

  @@index([createdAt], map: "series_created_at")
  @@index([fkUserId], map: "series_fk_user_id")
  @@index([fkUserId, urlSlug], map: "series_fk_user_id_url_slug")
  @@index([updatedAt], map: "series_updated_at")
  @@map("series")
}

model SeriesPost {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkSeriesId String?  @map("fk_series_id") @db.Uuid
  fkPostId   String?  @map("fk_post_id") @db.Uuid
  index      Int?
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  post       Post?    @relation(fields: [fkPostId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  series     Series?  @relation(fields: [fkSeriesId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([fkPostId], map: "series_posts_fk_post_id")
  @@index([fkSeriesId], map: "series_posts_fk_series_id")
  @@map("series_posts")
}

model SocialAccount {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  socialId    String?  @map("social_id") @db.VarChar(255)
  accessToken String?  @map("access_token") @db.VarChar(255)
  provider    String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  fkUserId    String?  @map("fk_user_id") @db.Uuid
  user        User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([provider, socialId], map: "social_accounts_provider_social_id")
  @@map("social_accounts")
}

model TagAlias {
  id                             String   @id(map: "PK_8eddc983e5df66c0c2644e33152") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkTagId                        String   @map("fk_tag_id") @db.Uuid
  fkAliasTagId                   String   @map("fk_alias_tag_id") @db.Uuid
  createdAt                      DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                      DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  tagsTagAliasFkTagIdTotags      Tag      @relation("tag_alias_fk_tag_idTotags", fields: [fkTagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_38921256eca6f24170411db8ac7")
  tagsTagAliasFkAliasTagIdTotags Tag      @relation("tag_alias_fk_alias_tag_idTotags", fields: [fkAliasTagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_7b79c9ec6899a16e12374462dfc")

  @@index([fkTagId], map: "IDX_38921256eca6f24170411db8ac")
  @@index([fkAliasTagId], map: "IDX_7b79c9ec6899a16e12374462df")
  @@map("tag_alias")
}

model Tag {
  id                                 String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                               String?         @unique @db.VarChar(255)
  createdAt                          DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                          DateTime        @default(now()) @map("updated_at") @db.Timestamptz(6)
  description                        String?         @db.VarChar(255)
  thumbnail                          String?         @db.VarChar(255)
  nameFiltered                       String?         @map("name_filtered") @db.VarChar(255)
  isAlias                            Boolean         @default(false) @map("is_alias")
  followTag                          FollowTag[]
  postTagLegacy                      PostTagLegacy[]
  postTag                            PostTag[]
  tagAliasTagAliasFkTagIdTotags      TagAlias[]      @relation("tag_alias_fk_tag_idTotags")
  tagAliasTagAliasFkAliasTagIdTotags TagAlias[]      @relation("tag_alias_fk_alias_tag_idTotags")

  @@index([isAlias], map: "tags_is_alias")
  @@index([nameFiltered], map: "tags_name_filtered")
  @@map("tags")
}

model UrlSlugHistory {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkPostId  String?  @map("fk_post_id") @db.Uuid
  fkUserId  String?  @map("fk_user_id") @db.Uuid
  urlSlug   String?  @map("url_slug") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  post      Post?    @relation(fields: [fkPostId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user      User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([createdAt], map: "url_slug_histories_created_at")
  @@index([urlSlug], map: "url_slug_histories_url_slug")
  @@map("url_slug_histories")
}

model UserImage {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkUserId  String?  @map("fk_user_id") @db.Uuid
  path      String?  @db.VarChar(255)
  filesize  Int?
  type      String?  @db.VarChar(255)
  refId     String?  @map("ref_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  user      User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([fkUserId], map: "user_images_fk_user_id")
  @@index([refId], map: "user_images_ref_id")
  @@index([type], map: "user_images_type")
  @@map("user_images")
}

model UserImageCloudflare {
  id        String   @id(map: "PK_2895f99b8fa2dec81b3ac82c2e3") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkUserId  String   @map("fk_user_id") @db.Uuid
  filesize  Int
  type      String   @db.VarChar(255)
  refId     String?  @map("ref_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  resultId  String   @map("result_id") @db.VarChar(64)
  tracked   Boolean
  filename  String   @db.VarChar(255)
  user      User     @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_47800d2104cdf1e4c7999e6357a")

  @@index([createdAt], map: "IDX_3e1934c686ba81d69d94c7eaca")
  @@index([fkUserId], map: "IDX_47800d2104cdf1e4c7999e6357")
  @@index([resultId], map: "IDX_889aa4a3b67cfe2860497cf352")
  @@index([refId], map: "IDX_9dcb58703dd449a2b9d4f1837d")
  @@index([tracked], map: "IDX_ecec86174f01962d927345e45b")
  @@map("user_images_cloudflare")
}

model UserImageNext {
  id        String   @id(map: "PK_a1b3395aa09fbb4233f15ae06eb") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkUserId  String   @map("fk_user_id") @db.Uuid
  filesize  Int
  type      String   @db.VarChar(255)
  refId     String?  @map("ref_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  tracked   Boolean
  fileId    String?  @map("file_id") @db.VarChar(255)
  path      String?  @db.VarChar(512)
  user      User     @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_9d2936750a40b9b10b860c8f772")

  @@index([tracked], map: "IDX_0c612fa2d1476216b46248ba97")
  @@index([fkUserId], map: "IDX_9d2936750a40b9b10b860c8f77")
  @@index([refId], map: "IDX_a46dbd7f1bb6c6583c57fd63a0")
  @@index([createdAt], map: "IDX_db3cf1ab4238e91d026b5a8977")
  @@map("user_images_next")
}

model UserMeta {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkUserId          String?  @map("fk_user_id") @db.Uuid
  emailNotification Boolean? @default(false) @map("email_notification")
  emailPromotion    Boolean? @default(false) @map("email_promotion")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  user              User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([fkUserId], map: "user_meta_fk_user_id")
  @@map("user_meta")
}

model UserProfile {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  displayName  String?  @map("display_name") @db.VarChar(255)
  shortBio     String?  @map("short_bio") @db.VarChar(255)
  thumbnail    String?  @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  fkUserId     String?  @unique @map("fk_user_id") @db.Uuid
  profileLinks Json     @default("{}") @map("profile_links")
  about        String   @default("")
  user         User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade)

  @@index([fkUserId], map: "user_profiles_fk_user_id")
  @@map("user_profiles")
}

model UserThumbnail {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fkUserId  String?  @map("fk_user_id") @db.Uuid
  path      String?  @db.VarChar(255)
  filesize  Int?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  user      User?    @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@map("user_thumbnails")
}

model User {
  id                                        String                       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username                                  String                       @unique @db.VarChar(255)
  email                                     String?                      @unique @db.VarChar(255)
  createdAt                                 DateTime                     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                 DateTime                     @default(now()) @map("updated_at") @db.Timestamptz(6)
  isCertified                               Boolean?                     @default(false) @map("is_certified")
  adminUser                                 AdminUser[]
  authToken                                 AuthToken[]
  category                                  Category[]
  comment                                   Comment[]
  emailCert                                 EmailCert[]
  externalIntegrationHistory                ExternalIntegrationHistory[]
  externalIntegration                       ExternalIntegration[]
  feed                                      Feed[]
  followTag                                 FollowTag[]
  followUserFollowUserFkFollowUserIdTousers FollowUser[]                 @relation("follow_user_fk_follow_user_idTousers")
  followUserFollowUserFkUserIdTousers       FollowUser[]                 @relation("follow_user_fk_user_idTousers")
  postImage                                 PostImage[]
  postLike                                  PostLike[]
  postReadLog                               PostReadLog[]
  postRead                                  PostRead[]
  postScore                                 PostScore[]
  post                                      Post[]
  series                                    Series[]
  socialAccount                             SocialAccount[]
  urlSlugHistory                            UrlSlugHistory[]
  userImage                                 UserImage[]
  userImageCloudflare                       UserImageCloudflare[]
  userImageNext                             UserImageNext[]
  userMeta                                  UserMeta[]
  userProfile                               UserProfile?
  userThumbnail                             UserThumbnail[]
  velogConfig                               VelogConfig?

  @@index([email], map: "users_email")
  @@index([username], map: "users_username")
  @@map("users")
}

model VelogConfig {
  id        String   @id(map: "PK_24f36353fb78d23293b7a3f15df") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  title     String?  @db.VarChar(255)
  logoImage String?  @map("logo_image") @db.VarChar(255)
  fkUserId  String   @unique(map: "REL_8b5be783e08f563452ec0c489e") @map("fk_user_id") @db.Uuid
  user      User     @relation(fields: [fkUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_8b5be783e08f563452ec0c489e1")

  @@map("velog_configs")
}

model ExternalIntegration {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code          String   @unique @db.VarChar(64)
  isConsumed    Boolean  @default(false) @map("is_consumed")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  fkUserId      String   @map("fk_user_id") @db.Uuid
  appIdentifier String   @map("app_identifier") @db.VarChar(64)
  user          User     @relation(fields: [fkUserId], references: [id])

  @@index([fkUserId])
  @@index([appIdentifier])
  @@map("external_integrations")
}

model ExternalIntegrationHistory {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  appIdentifier String   @map("app_identifier") @db.VarChar(64)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  fkUserId      String   @map("fk_user_id") @db.Uuid
  user          User     @relation(fields: [fkUserId], references: [id])

  @@unique([appIdentifier, fkUserId])
  @@index([fkUserId])
  @@index([appIdentifier])
  @@map("external_integration_histories")
}
